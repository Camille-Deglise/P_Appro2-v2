Pour une clé étrangère simple :
Lorsque vous créez une clé étrangère simple dans une table, Laravel peut généralement gérer les noms de colonnes correctement, 
même si le nom du modèle ne correspond pas exactement au nom de la table. 
Dans le cas de Mesured_Value, la méthode foreignIdFor fonctionne correctement sans avoir besoin de renommer 
le modèle car le nom du modèle est déjà en CamelCase (Mesured_Value), ce qui permet à Laravel de générer 
les noms de colonnes correctement.

Pour une clé primaire dans une table de pivot :
Lorsque vous créez une clé primaire dans une table de pivot, Laravel utilise la méthode foreignIdFor pour générer 
les noms de colonnes. Si le nom du modèle contient des caractères spéciaux comme un trait d'union _, 
cela peut conduire à des problèmes de génération de noms de colonnes. 
Dans le cas de Medical_History, le trait d'union _ dans le nom du modèle a causé des problèmes de génération 
de noms de colonnes, ce qui a nécessité de renommer le modèle en MedicalHistory pour résoudre le problème.

En résumé :
Clé étrangère simple : Pas de problème avec la méthode foreignIdFor, même si le nom du modèle ne correspond pas 
exactement au nom de la table.
Clé primaire dans une table de pivot : La méthode foreignIdFor peut rencontrer des problèmes si le nom du modèle c
ontient des caractères spéciaux. Il est donc conseillé d'utiliser un nom de modèle en CamelCase sans caractères spéciaux 
pour éviter ces problèmes.
C'est pourquoi il est recommandé de suivre les conventions de nommage de Laravel et 
d'utiliser des noms de modèles en CamelCase sans caractères spéciaux pour faciliter la génération automatique 
des migrations et des clés étrangères avec foreignIdFor.